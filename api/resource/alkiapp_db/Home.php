<?php /** 
* Generated by
* 
*      _____ _          __  __      _     _
*     / ____| |        / _|/ _|    | |   | |
*    | (___ | | ____ _| |_| |_ ___ | | __| | ___ _ __
*     \___ \| |/ / _` |  _|  _/ _ \| |/ _` |/ _ \ '__|
*     ____) |   < (_| | | | || (_) | | (_| |  __/ |
*    |_____/|_|\_\__,_|_| |_| \___/|_|\__,_|\___|_|
*
* The code generator that works in many programming languages
*
*			https://www.skaffolder.com
*
*
* You can generate the code from the command-line
*       https://npmjs.com/package/skaffolder-cli
*
*       npm install -g skaffodler-cli
*
*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *
*
* To remove this comment please upgrade your plan here: 
*      https://app.skaffolder.com/#!/upgrade
*
* Or get up to 70% discount sharing your unique link:
*       https://app.skaffolder.com/#!/register?friend=5d4f828d2e8ab75d05c7281e
*
* You will get 10% discount for each one of your friends
* 
*/
?>
<?php
	require_once './db/dbalkiapp_dbManager.php';
	
/*
 * SCHEMA DB Home
 * 
	{
		address: {
			type: 'String', 
			required : true
		},
		available: {
			type: 'Integer', 
			required : true
		},
		bathrooms: {
			type: 'Integer', 
			required : true
		},
		city: {
			type: 'String', 
			required : true
		},
		description: {
			type: 'String'
		},
		images: {
			type: 'String', 
			required : true
		},
		internet: {
			type: 'Integer', 
			required : true
		},
		onlyfor: {
			type: 'Integer', 
			required : true
		},
		owner: {
			type: 'Integer', 
			required : true
		},
		price: {
			type: 'Integer', 
			required : true
		},
		rooms: {
			type: 'Integer', 
			required : true
		},
		//RELAZIONI
		
		
		//RELAZIONI ESTERNE
		
		
	}
 * 
 */


//CRUD METHODS


//CRUD - CREATE


$app->post('/home',	function () use ($app){

	$body = json_decode($app->request()->getBody());
	
	$params = array (
		'address'	=> $body->address,
		'available'	=> $body->available,
		'bathrooms'	=> $body->bathrooms,
		'city'	=> $body->city,
		'description'	=> isset($body->description)?$body->description:'',
		'images'	=> $body->images,
		'internet'	=> $body->internet,
		'onlyfor'	=> $body->onlyfor,
		'owner'	=> $body->owner,
		'price'	=> $body->price,
		'rooms'	=> $body->rooms,
			);

	$obj = makeQuery("INSERT INTO home (_id, address, available, bathrooms, city, description, images, internet, onlyfor, owner, price, rooms )  VALUES ( null, :address, :available, :bathrooms, :city, :description, :images, :internet, :onlyfor, :owner, :price, :rooms   )", $params, false);

	
	echo json_encode($body);
	
});
	
//CRUD - REMOVE

$app->delete('/home/:id',	function ($id) use ($app){
	
	$params = array (
		'id'	=> $id,
	);

	makeQuery("DELETE FROM home WHERE _id = :id LIMIT 1", $params);

});
	
//CRUD - GET ONE
	
$app->get('/home/:id',	function ($id) use ($app){
	$params = array (
		'id'	=> $id,
	);
	
	$obj = makeQuery("SELECT * FROM home WHERE _id = :id LIMIT 1", $params, false);
	
	
	
	echo json_encode($obj);
	
});
	
	
//CRUD - GET LIST

$app->get('/home',	function () use ($app){
	makeQuery("SELECT * FROM home");
});


//CRUD - EDIT

$app->post('/home/:id',	function ($id) use ($app){

	$body = json_decode($app->request()->getBody());
	
	$params = array (
		'id'	=> $id,
		'address'	    => $body->address,
		'available'	    => $body->available,
		'bathrooms'	    => $body->bathrooms,
		'city'	    => $body->city,
		'description'	    => isset($body->description)?$body->description:'',
		'images'	    => $body->images,
		'internet'	    => $body->internet,
		'onlyfor'	    => $body->onlyfor,
		'owner'	    => $body->owner,
		'price'	    => $body->price,
		'rooms'	    => $body->rooms	);

	$obj = makeQuery("UPDATE home SET  address = :address,  available = :available,  bathrooms = :bathrooms,  city = :city,  description = :description,  images = :images,  internet = :internet,  onlyfor = :onlyfor,  owner = :owner,  price = :price,  rooms = :rooms   WHERE _id = :id LIMIT 1", $params, false);

	
	echo json_encode($body);
    	
});


/*
 * CUSTOM SERVICES
 *
 *	These services will be overwritten and implemented in  Custom.js
 */

			
?>